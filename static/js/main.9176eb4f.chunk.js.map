{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Components/Modal.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","handlemodal","robot","className","onClick","alt","src","Cardlist","robots","map","user","i","SearchBox","SearchValue","searchchange","placeholder","value","onChange","event","target","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","Modal","ismodaldisplay","currentLocation","handleclosemodal","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","position","Popup","App","onsearchchange","fetch","then","response","json","users","filteredRobot","filter","toLowerCase","includes","length","lat","address","geo","lng","CardList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9176eb4f.chunk.js","sourcesContent":["const Card = ({ name, email, id, handlemodal, robot }) => {\r\n  return (\r\n    <div className=\"cards\" onClick={() => handlemodal(robot)}>\r\n      <img alt=\"img\" className=\"robopics\" src={`https://robohash.org/${id}?`} />\r\n      <h4>{name}</h4>\r\n      <p>{email}</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import Card from \"./Card\";\r\n\r\nconst Cardlist = ({ robots, handlemodal }) => {\r\n  // if (true) {\r\n  //   throw new Error(\"Oooh Shit!!!\");\r\n  // }\r\n\r\n  return (\r\n    <div className=\"cardsbox\">\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            handlemodal={handlemodal}\r\n            key={i}\r\n            robot={robots[i]}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default Cardlist;\r\n","const SearchBox = ({ SearchValue, searchchange }) => {\r\n  return (\r\n    <input\r\n      className=\"searchbox\"\r\n      placeholder=\"SearchRobots\"\r\n      value={SearchValue}\r\n      onChange={(event) => searchchange(event.target.value)}\r\n    />\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import react from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"450px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Scroll;\r\n","import { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h1>shit!!!!!!!! Something'wrong!!!!!!!!!</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\nexport default ErrorBoundry;\r\n","import { Component } from \"react\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport icon from \"leaflet/dist/images/marker-icon.png\";\r\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\r\n\r\nlet DefaultIcon = L.icon({\r\n  iconUrl: icon,\r\n  shadowUrl: iconShadow,\r\n});\r\n\r\nL.Marker.prototype.options.icon = DefaultIcon;\r\n\r\nconst Modal = ({ ismodaldisplay, currentLocation, handleclosemodal }) => {\r\n  return ismodaldisplay ? (\r\n    <div className=\"modal\">\r\n      <MapContainer center={currentLocation} zoom={7} scrollWheelZoom={false}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <Marker position={currentLocation}>\r\n          <Popup>\r\n            A pretty CSS3 popup. <br /> Easily customizable.\r\n          </Popup>\r\n        </Marker>\r\n      </MapContainer>\r\n      <button onClick={() => handleclosemodal()} className=\"closemodalbtn\">\r\n        close\r\n      </button>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default Modal;\r\n","import { Component } from \"react\";\r\nimport CardList from \"../Components/CardList\";\r\nimport SearchBox from \"../Components/SearchBox\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport ErrorBoundry from \"../Components/ErrorBoundry\";\r\nimport \"../Containers/App.css\";\r\nimport Modal from \"../Components/Modal\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      robot: null,\r\n      SearchValue: \"\",\r\n      ismodaldisplay: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ robots: users }));\r\n  }\r\n\r\n  onsearchchange = (SearchValue) => {\r\n    this.setState({ SearchValue });\r\n  };\r\n  render() {\r\n    const filteredRobot = this.state.robots.filter((robot) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.state.SearchValue.toLowerCase());\r\n    });\r\n    const currentLocation = () => {\r\n      if (this.state.robot === null) return;\r\n      let lat = this.state.robot.address.geo.lat;\r\n      let lng = this.state.robot.address.geo.lng;\r\n\r\n      return { lat, lng };\r\n    };\r\n\r\n    const handlemodal = (robot) => {\r\n      this.setState({ ismodaldisplay: true, robot });\r\n    };\r\n    const handleclosemodal = () => {\r\n      this.setState({ ismodaldisplay: false });\r\n    };\r\n    if (this.state.robots.length === 0) {\r\n      return <h1>Loading Please Wait...</h1>;\r\n    } else {\r\n      return (\r\n        <div style={{ position: \"relative\" }}>\r\n          <Modal\r\n            currentLocation={currentLocation()}\r\n            robot={this.state.robot}\r\n            ismodaldisplay={this.state.ismodaldisplay}\r\n            handleclosemodal={handleclosemodal}\r\n          />\r\n          <h1 className=\"h1\">Robo Friend</h1>\r\n\r\n          <SearchBox searchchange={this.onsearchchange} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filteredRobot} handlemodal={handlemodal} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}